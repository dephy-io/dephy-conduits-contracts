/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace IMarketplace {
  export type ListingInfoStruct = {
    minRentalDays: BigNumberish;
    maxRentalDays: BigNumberish;
    rentCurrency: string;
    dailyRent: BigNumberish;
    rentRecipient: string;
    status: BigNumberish;
  };

  export type ListingInfoStructOutput = [
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    number
  ] & {
    minRentalDays: BigNumber;
    maxRentalDays: BigNumber;
    rentCurrency: string;
    dailyRent: BigNumber;
    rentRecipient: string;
    status: number;
  };

  export type RentalInfoStruct = {
    accessId: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    rentalDays: BigNumberish;
    rentCurrency: string;
    dailyRent: BigNumberish;
    totalPaidRent: BigNumberish;
    status: BigNumberish;
  };

  export type RentalInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number
  ] & {
    accessId: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    rentalDays: BigNumber;
    rentCurrency: string;
    dailyRent: BigNumber;
    totalPaidRent: BigNumber;
    status: number;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "MAX_POINTS()": FunctionFragment;
    "NATIVE_TOKEN()": FunctionFragment;
    "PRODUCT_FACTORY()": FunctionFragment;
    "addRentCurrencies(address[])": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "delist(address)": FunctionFragment;
    "endLease(address)": FunctionFragment;
    "getAccessesByDevice(address)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getDeviceBinding(address)": FunctionFragment;
    "getDeviceByAccessId(uint256)": FunctionFragment;
    "getListingInfo(address)": FunctionFragment;
    "getRentalInfo(address)": FunctionFragment;
    "isAccessible(address,address)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "list(address,uint256,uint256,address,uint256,address,string)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "payRent(address,uint256)": FunctionFragment;
    "relist(address,uint256,uint256,address,uint256,address)": FunctionFragment;
    "removeRentCurrencies(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rent(address,address,uint256,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFeePoints(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "supportedRentCurrencies(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_POINTS"
      | "NATIVE_TOKEN"
      | "PRODUCT_FACTORY"
      | "addRentCurrencies"
      | "approve"
      | "balanceOf"
      | "delist"
      | "endLease"
      | "getAccessesByDevice"
      | "getApproved"
      | "getDeviceBinding"
      | "getDeviceByAccessId"
      | "getListingInfo"
      | "getRentalInfo"
      | "isAccessible"
      | "isApprovedForAll"
      | "list"
      | "name"
      | "owner"
      | "ownerOf"
      | "payRent"
      | "relist"
      | "removeRentCurrencies"
      | "renounceOwnership"
      | "rent"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setFeePoints"
      | "setTreasury"
      | "supportedRentCurrencies"
      | "supportsInterface"
      | "symbol"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRODUCT_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRentCurrencies",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "delist", values: [string]): string;
  encodeFunctionData(functionFragment: "endLease", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAccessesByDevice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeviceBinding",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeviceByAccessId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRentalInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAccessible",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payRent",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relist",
    values: [string, BigNumberish, BigNumberish, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeRentCurrencies",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rent",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeePoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportedRentCurrencies",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(functionFragment: "MAX_POINTS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRODUCT_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRentCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endLease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccessesByDevice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeviceBinding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeviceByAccessId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRentalInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAccessible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payRent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRentCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeePoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedRentCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "Delist(address,address)": EventFragment;
    "EndLease(address,address)": EventFragment;
    "List(address,address,uint256,uint256,address,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PayRent(address,uint256)": EventFragment;
    "Relist(address,address,uint256,uint256,address,uint256,address)": EventFragment;
    "Rent(address,uint256,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Withdraw(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Delist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndLease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "List"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayRent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Relist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface DelistEventObject {
  owner: string;
  device: string;
}
export type DelistEvent = TypedEvent<[string, string], DelistEventObject>;

export type DelistEventFilter = TypedEventFilter<DelistEvent>;

export interface EndLeaseEventObject {
  device: string;
  operator: string;
}
export type EndLeaseEvent = TypedEvent<[string, string], EndLeaseEventObject>;

export type EndLeaseEventFilter = TypedEventFilter<EndLeaseEvent>;

export interface ListEventObject {
  owner: string;
  device: string;
  minRentalDays: BigNumber;
  maxRentalDays: BigNumber;
  rentCurrency: string;
  dailyRent: BigNumber;
  rentRecipient: string;
}
export type ListEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, string],
  ListEventObject
>;

export type ListEventFilter = TypedEventFilter<ListEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PayRentEventObject {
  device: string;
  rent: BigNumber;
}
export type PayRentEvent = TypedEvent<[string, BigNumber], PayRentEventObject>;

export type PayRentEventFilter = TypedEventFilter<PayRentEvent>;

export interface RelistEventObject {
  owner: string;
  device: string;
  minRentalDays: BigNumber;
  maxRentalDays: BigNumber;
  rentCurrency: string;
  dailyRent: BigNumber;
  rentRecipient: string;
}
export type RelistEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, string, BigNumber, string],
  RelistEventObject
>;

export type RelistEventFilter = TypedEventFilter<RelistEvent>;

export interface RentEventObject {
  device: string;
  accessId: BigNumber;
  tenant: string;
  startTime: BigNumber;
  endTime: BigNumber;
  rentalDays: BigNumber;
  prepaidRent: BigNumber;
}
export type RentEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber],
  RentEventObject
>;

export type RentEventFilter = TypedEventFilter<RentEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface WithdrawEventObject {
  owner: string;
  device: string;
}
export type WithdrawEvent = TypedEvent<[string, string], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    NATIVE_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    PRODUCT_FACTORY(overrides?: CallOverrides): Promise<[string]>;

    addRentCurrencies(
      rentCurrencies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    delist(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    endLease(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAccessesByDevice(
      device: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDeviceBinding(
      device: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { product: string; tokenId: BigNumber }>;

    getDeviceByAccessId(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getListingInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.ListingInfoStructOutput]>;

    getRentalInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<[IMarketplace.RentalInfoStructOutput]>;

    isAccessible(
      device: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    list(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      accessURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    payRent(
      device: string,
      rent_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    relist(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeRentCurrencies(
      rentCurrencies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rent(
      device: string,
      tenant: string,
      rentalDays: BigNumberish,
      prepaidRent: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFeePoints(
      feePoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportedRentCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  MAX_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

  PRODUCT_FACTORY(overrides?: CallOverrides): Promise<string>;

  addRentCurrencies(
    rentCurrencies: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  delist(
    device: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  endLease(
    device: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAccessesByDevice(
    device: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDeviceBinding(
    device: string,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { product: string; tokenId: BigNumber }>;

  getDeviceByAccessId(
    accessId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getListingInfo(
    device: string,
    overrides?: CallOverrides
  ): Promise<IMarketplace.ListingInfoStructOutput>;

  getRentalInfo(
    device: string,
    overrides?: CallOverrides
  ): Promise<IMarketplace.RentalInfoStructOutput>;

  isAccessible(
    device: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  list(
    device: string,
    minRentalDays: BigNumberish,
    maxRentalDays: BigNumberish,
    rentCurrency: string,
    dailyRent: BigNumberish,
    rentRecipient: string,
    accessURI: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  payRent(
    device: string,
    rent_: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  relist(
    device: string,
    minRentalDays: BigNumberish,
    maxRentalDays: BigNumberish,
    rentCurrency: string,
    dailyRent: BigNumberish,
    rentRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeRentCurrencies(
    rentCurrencies: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rent(
    device: string,
    tenant: string,
    rentalDays: BigNumberish,
    prepaidRent: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFeePoints(
    feePoints: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setTreasury(
    treasury: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportedRentCurrencies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(accessId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    device: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN(overrides?: CallOverrides): Promise<string>;

    PRODUCT_FACTORY(overrides?: CallOverrides): Promise<string>;

    addRentCurrencies(
      rentCurrencies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    delist(device: string, overrides?: CallOverrides): Promise<void>;

    endLease(device: string, overrides?: CallOverrides): Promise<void>;

    getAccessesByDevice(
      device: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDeviceBinding(
      device: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { product: string; tokenId: BigNumber }>;

    getDeviceByAccessId(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getListingInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<IMarketplace.ListingInfoStructOutput>;

    getRentalInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<IMarketplace.RentalInfoStructOutput>;

    isAccessible(
      device: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    list(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      accessURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    payRent(
      device: string,
      rent_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    relist(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeRentCurrencies(
      rentCurrencies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rent(
      device: string,
      tenant: string,
      rentalDays: BigNumberish,
      prepaidRent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeePoints(
      feePoints: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(treasury: string, overrides?: CallOverrides): Promise<void>;

    supportedRentCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(device: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "Delist(address,address)"(
      owner?: string | null,
      device?: string | null
    ): DelistEventFilter;
    Delist(owner?: string | null, device?: string | null): DelistEventFilter;

    "EndLease(address,address)"(
      device?: string | null,
      operator?: null
    ): EndLeaseEventFilter;
    EndLease(device?: string | null, operator?: null): EndLeaseEventFilter;

    "List(address,address,uint256,uint256,address,uint256,address)"(
      owner?: string | null,
      device?: string | null,
      minRentalDays?: null,
      maxRentalDays?: null,
      rentCurrency?: null,
      dailyRent?: null,
      rentRecipient?: null
    ): ListEventFilter;
    List(
      owner?: string | null,
      device?: string | null,
      minRentalDays?: null,
      maxRentalDays?: null,
      rentCurrency?: null,
      dailyRent?: null,
      rentRecipient?: null
    ): ListEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PayRent(address,uint256)"(
      device?: string | null,
      rent?: null
    ): PayRentEventFilter;
    PayRent(device?: string | null, rent?: null): PayRentEventFilter;

    "Relist(address,address,uint256,uint256,address,uint256,address)"(
      owner?: string | null,
      device?: string | null,
      minRentalDays?: null,
      maxRentalDays?: null,
      rentCurrency?: null,
      dailyRent?: null,
      rentRecipient?: null
    ): RelistEventFilter;
    Relist(
      owner?: string | null,
      device?: string | null,
      minRentalDays?: null,
      maxRentalDays?: null,
      rentCurrency?: null,
      dailyRent?: null,
      rentRecipient?: null
    ): RelistEventFilter;

    "Rent(address,uint256,address,uint256,uint256,uint256,uint256)"(
      device?: string | null,
      accessId?: BigNumberish | null,
      tenant?: string | null,
      startTime?: null,
      endTime?: null,
      rentalDays?: null,
      prepaidRent?: null
    ): RentEventFilter;
    Rent(
      device?: string | null,
      accessId?: BigNumberish | null,
      tenant?: string | null,
      startTime?: null,
      endTime?: null,
      rentalDays?: null,
      prepaidRent?: null
    ): RentEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;

    "Withdraw(address,address)"(
      owner?: string | null,
      device?: string | null
    ): WithdrawEventFilter;
    Withdraw(
      owner?: string | null,
      device?: string | null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    PRODUCT_FACTORY(overrides?: CallOverrides): Promise<BigNumber>;

    addRentCurrencies(
      rentCurrencies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    delist(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    endLease(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAccessesByDevice(
      device: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeviceBinding(
      device: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeviceByAccessId(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRentalInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAccessible(
      device: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    list(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      accessURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payRent(
      device: string,
      rent_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    relist(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeRentCurrencies(
      rentCurrencies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rent(
      device: string,
      tenant: string,
      rentalDays: BigNumberish,
      prepaidRent: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFeePoints(
      feePoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportedRentCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NATIVE_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRODUCT_FACTORY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addRentCurrencies(
      rentCurrencies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delist(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    endLease(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAccessesByDevice(
      device: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeviceBinding(
      device: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeviceByAccessId(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRentalInfo(
      device: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAccessible(
      device: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    list(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      accessURI: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payRent(
      device: string,
      rent_: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    relist(
      device: string,
      minRentalDays: BigNumberish,
      maxRentalDays: BigNumberish,
      rentCurrency: string,
      dailyRent: BigNumberish,
      rentRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeRentCurrencies(
      rentCurrencies: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rent(
      device: string,
      tenant: string,
      rentalDays: BigNumberish,
      prepaidRent: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFeePoints(
      feePoints: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportedRentCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(
      accessId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      device: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
